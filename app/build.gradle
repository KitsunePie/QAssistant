plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "org.kitsunepie.qassistant"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "0.0.1"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                arguments "-DQNOTIFIED_VERSION=" + versionName
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    aaptOptions {
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x64'
    }
    externalNativeBuild {
        // Encapsulates your CMake build configurations.
        cmake {
            // Provides a relative path to your CMake build script.
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    // implementation fileTree(dir:'libs',include:['*.jar','*.aar'])
    implementation project(":MaiTungTM_UI:MaiTungTMUI")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compileOnly 'de.robv.android.xposed:api:82'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.tencent:mmkv-static:1.2.9'
    implementation project(":EzXHelper:EzXHelper")
    implementation project(":annotations")
    compileOnly project(":compiler")
    kapt project(":compiler")
}

/*
Anti MT Noob
copy from QNotified
Author cinit
*/
/*
 * QNotified - An Xposed module for QQ/TIM
 * Copyright (C) 2019-2021 dmca@ioctl.cc
 * https://github.com/ferredoxin/QNotified
 *
 * This software is non-free but opensource software: you can redistribute it
 * and/or modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either
 * version 3 of the License, or any later version and our eula as published
 * by ferredoxin.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * and eula along with this software.  If not, see
 * <https://www.gnu.org/licenses/>
 * <https://github.com/ferredoxin/QNotified/blob/master/LICENSE.md>.
 */
def _execDexTail = { String dexPath ->
    URLClassLoader cl = new URLClassLoader(java.nio.file.Paths.get(rootProject.projectDir.absolutePath, "libs", "dex-ptm", "build", "classes", "java", "main").toUri().toURL())
    try {
        byte[] time = cl.loadClass("cc.ioctl.dextail.HexUtils").getMethod("getTimeAsByteArray").invoke(null) as byte[]
        PrintStream stdout = System.out
        boolean result = cl.loadClass("cc.ioctl.dextail.Main").getMethod("checkAndUpdateTail", String.class, byte[].class, boolean.class, PrintStream.class)
                .invoke(null, dexPath, time, true, stdout)
        return result
    } catch (Exception ie) {
        throw ie.cause
    }
}

task dexTailDebug {
    doLast {
        println("dexTailDebug.doLast invoked")
        ArrayList<File> pathList = new ArrayList<>()
        //3.6.x, plain
        String tmp_path = "intermediates/dex/debug/out/classes.dex"
        if ("/" != File.separator) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
        }
        File tmp_f = new File(project.buildDir, tmp_path)
        if (tmp_f.exists()) {
            pathList.add(tmp_f)
        }
        //3.6.x, minify
        tmp_path = "intermediates/dex/debug/shrunkDex/classes.dex"
        if ("/" != File.separator) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
        }
        tmp_f = new File(project.buildDir, tmp_path)
        if (tmp_f.exists()) {
            pathList.add(tmp_f)
        }
        //4.0.x single
        tmp_path = "intermediates/dex/debug/mergeExtDexDebug/classes.dex"
        if ("/" != File.separator) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
        }
        tmp_f = new File(project.buildDir, tmp_path)
        if (tmp_f.exists()) {
            pathList.add(tmp_f)
        }
        //end
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x")
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false")
            }
        }
    }
}

task dexTailRelease {
    doLast {
        println("dexTailRelease.doLast invoked")
        ArrayList<File> pathList = new ArrayList<>()
        //3.6.x single?
        String tmp_path = "intermediates/dex/release/out/classes.dex"
        if ("/" != File.separator) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
        }
        File tmp_f = new File(project.buildDir, tmp_path)
        if (tmp_f.exists()) {
            pathList.add(tmp_f)
        }
        //3.6.x, minify
        tmp_path = "intermediates/dex/release/shrunkDex/classes.dex"
        if ("/" != File.separator) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
        }
        tmp_f = new File(project.buildDir, tmp_path)
        if (tmp_f.exists()) {
            pathList.add(tmp_f)
        }
        //4.0.x single
        tmp_path = "intermediates/dex/release/mergeDexRelease/classes.dex"
        if ("/" != File.separator) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
        }
        tmp_f = new File(project.buildDir, tmp_path)
        if (tmp_f.exists()) {
            pathList.add(tmp_f)
        }
        //end
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x")
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false")
            }
        }
    }
}

dexTailDebug.dependsOn(":dex-ptm:assemble")
dexTailRelease.dependsOn(":dex-ptm:assemble")

task checkTargetNativeLibsDebug {
    doLast {
        String[] targetAbi = ["arm64-v8a", "armeabi-v7a"]
        String soName = "libnatives.so"
        String libPath = "app/build/intermediates/cmake/debug/obj"
        for (String abi : targetAbi) {
            String tmp_path = libPath + "/" + abi + "/" + soName
            if ("/" != File.separator) {
                tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
            }
            File f = new File(rootProject.projectDir, tmp_path)
            if (!f.exists()) {
                throw new IllegalStateException("Native library missing for the target abi: " + abi
                        + ".\nPlease run gradle task ':app:externalNativeBuildDebug' manually to " +
                        "force android gradle plugin to satisfy all required ABIs.")
            }
        }
    }
}
checkTargetNativeLibsDebug.dependsOn ":app:externalNativeBuildDebug"

task checkTargetNativeLibsRelease {
    doLast {
        String[] targetAbi = ["arm64-v8a", "armeabi-v7a"]
        String soName = "libnatives.so"
        String libPath = "app/build/intermediates/cmake/release/obj"
        for (String abi : targetAbi) {
            String tmp_path = libPath + "/" + abi + "/" + soName
            if ("/" != File.separator) {
                tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar)
            }
            File f = new File(rootProject.projectDir, tmp_path)
            if (!f.exists()) {
                throw new IllegalStateException("Native library missing for the target abi: " + abi
                        + ".\nPlease run gradle task ':app:externalNativeBuildRelease' manually to " +
                        "force android gradle plugin to satisfy all required ABIs.")
            }
        }
    }
}
checkTargetNativeLibsRelease.dependsOn ":app:externalNativeBuildRelease"

tasks.whenTaskAdded { t ->
    if (t.name == 'assembleDebug') {
        t.dependsOn dexTailDebug
    }
    if (t.name == 'mergeDexDebug') {
        dexTailDebug.dependsOn t
    }
    if (t.name == 'stripDebugDebugSymbols') {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'dexBuilderDebug' || t.name == 'mergeExtDexDebug'
            || t.name == 'mergeLibDexDebug' || t.name == 'mergeProjectDexDebug'
            || t.name == 'shrinkDebugRes' || t.name.startsWith('minifyDebug')) {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'assembleRelease') {
        t.dependsOn dexTailRelease
    }
    if (t.name == 'mergeDexRelease') {
        dexTailRelease.dependsOn t
    }
    if (t.name == 'stripReleaseDebugSymbols') {
        dexTailRelease.mustRunAfter(t)
    }
    if (t.name == 'dexBuilderRelease' || t.name == 'mergeExtDexRelease'
            || t.name == 'mergeLibDexRelease' || t.name == 'mergeProjectDexRelease'
            || t.name == 'shrinkReleaseRes' || t.name.startsWith('minifyRelease')) {
        dexTailRelease.mustRunAfter(t)
    }
    if (t.name == 'packageDebug') {
        t.dependsOn checkTargetNativeLibsDebug
    }
    if (t.name == 'packageRelease') {
        t.dependsOn checkTargetNativeLibsRelease
    }
}
/*
Anti MT Noob
END
*/


